//
// Created by giacomo on 15/10/20.
//

#ifndef FUZZYSTRINGMATCHING2_ONLYTRANSITIVEEDGESCOST_H
#define FUZZYSTRINGMATCHING2_ONLYTRANSITIVEEDGESCOST_H

#include <unordered_map>
#include <utils/pair_hash.h>
#include "LabelledPathVisitingStrategy.h"
#define NEW_DEFINITION

/**
 * This data structure implements an iterator over a current matrix, representing the i-th closure of the graph
 */
struct OnlyTransitiveEdgesCost : public LabelledPathVisitingStrategy {
#ifndef NEW_DEFINITION
    double edge_summation = 0.0;
#endif
    std::unordered_map<std::pair<std::string, std::string>, double, pair_hash> currentEdgeStep;

    /**
     * Initialization
     * @param E             Graph's embedding map, passed by reference
     * @param l             Transitive closure decay factor
     * @param len           Current length of the paths generated by the transitive closure
     */
    OnlyTransitiveEdgesCost(std::unordered_map<std::pair<std::string, std::string>, double, pair_hash>& E, double l, size_t len = 1);
    ~OnlyTransitiveEdgesCost() override {}

    /**
     * Builds up the embedding for the left-right/pathLen
     * @param left      Label associated to the current left node
     * @param right     Label associated to the current right node
     * @param value     Value associated to the path
     */
    virtual void acceptMultiedge(const std::string& left, const std::string& right, double value) override;

    /**
     * Finalizes the map by dividing for the possible elements associated to the path
     */
    virtual void nextEdgeIteration() override ;

    /**
     * Finalizes the embedding generator
     *
     * @param weight        Weight associated to the graph
     */
    virtual void finalize(double weight) override;

    void acceptNode(const std::string &node, double value) override {}; // noop
    void nextNodeIteration(double thisNormalizationCost) override {}; // noop

private:
#ifdef NEW_DEFINITION
    std::unordered_map<std::string, size_t> L_node_frequency;
#endif
};


#endif //FUZZYSTRINGMATCHING2_ONLYTRANSITIVEEDGESCOST_H
